# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: DietDisplay

on:
  push:
    branches: [ "master", "yaml-setup" ]
  pull_request:
    branches: [ "master", "yaml-setup" ]

env:
  DOTNET_ROOT: /path/to/dotnet

jobs:
  buildAPI:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore DietDisplay.API 
    - name: Build
      run: dotnet build DietDisplay.API --no-restore
    - name: Test
      run: dotnet test DietDisplay.API --no-build --verbosity normal
    - name: Archive API build
      uses: actions/upload-artifact@v3
      with:
        name: API-build
        path: DietDisplay.API
    
  deployAPI:
    needs: buildAPI
    runs-on: ubuntu-latest
    steps:
    - name: Download API build
      uses: actions/download-artifact@v3
      with:
        name: API-build
        path: DietDisplay.API
    - name: Restore dependencies
      run: dotnet restore DietDisplay.API 
    - name: Publish
      run: dotnet publish DietDisplay.API --no-restore -c Release -r win-x64 --self-contained true
    - name: Archive API artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-API
        path: DietDisplay.API/bin/Release/net7.0/win-x64
    - name: ZIP published API
      run: zip -r API.zip DietDisplay.API/bin/Release/net7.0/win-x64
    - name: Upload ZIP with API via FTP
      run: |
        curl -T API.zip ftp://${{ secrets.FTP_HOST }}/ --user ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}
    - name: Unzip API on the server
      run: |
        curl -O ftp://${{ secrets.FTP_HOST }}/API.zip --user ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}
        unzip -j -o API.zip
        rm API.zip
        
  buildReact:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Install dependencies and build React app
        run: |
          cd dietdisplay.web
          npm install
          npm run build
      - name: Run tests
        run: |
          npm test
      - name: Archive React artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-React
          path: build
          
  deployReact:
      needs: 
        - buildReact
        - deployAPI
      runs-on: ubuntu-latest
      steps:
        - name: Download API build
          uses: actions/download-artifact@v3
          with:
            name: dist-React
            path: build
        - name: ZIP React build
          run: zip -r build.zip build
        - name: Upload ZIP with React via FTP
          run: |
            curl -T build.zip ftp://${{ secrets.FTP_HOST }}/wwwroot --user ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}
        - name: Unzip API on the server
          run: |
            curl -O ftp://${{ secrets.FTP_HOST }}/wwwroot/API.zip --user ${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}
            unzip -j -o API.zip
            rm API.zip
